// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using MyUniversalWindows10App;
using MyUniversalWindows10App.Models;

namespace MyUniversalWindows10App
{
    public static partial class SpeakersExtensions
    {
        /// <param name='operations'>
        /// Reference to the MyUniversalWindows10App.ISpeakers.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static object Delete(this ISpeakers operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISpeakers)s).DeleteAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the MyUniversalWindows10App.ISpeakers.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> DeleteAsync(this ISpeakers operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.DeleteWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the MyUniversalWindows10App.ISpeakers.
        /// </param>
        public static IList<Speaker> Get(this ISpeakers operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISpeakers)s).GetAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the MyUniversalWindows10App.ISpeakers.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<Speaker>> GetAsync(this ISpeakers operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<MyUniversalWindows10App.Models.Speaker>> result = await operations.GetWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the MyUniversalWindows10App.ISpeakers.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Speaker GetById(this ISpeakers operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISpeakers)s).GetByIdAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the MyUniversalWindows10App.ISpeakers.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Speaker> GetByIdAsync(this ISpeakers operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<MyUniversalWindows10App.Models.Speaker> result = await operations.GetByIdWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the MyUniversalWindows10App.ISpeakers.
        /// </param>
        /// <param name='searchTerm'>
        /// Required.
        /// </param>
        public static IList<Speaker> GetBySearchTerm(this ISpeakers operations, string searchTerm)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISpeakers)s).GetBySearchTermAsync(searchTerm);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the MyUniversalWindows10App.ISpeakers.
        /// </param>
        /// <param name='searchTerm'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<Speaker>> GetBySearchTermAsync(this ISpeakers operations, string searchTerm, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<MyUniversalWindows10App.Models.Speaker>> result = await operations.GetBySearchTermWithOperationResponseAsync(searchTerm, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the MyUniversalWindows10App.ISpeakers.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='speaker'>
        /// Required.
        /// </param>
        public static object Patch(this ISpeakers operations, int id, Speaker speaker)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISpeakers)s).PatchAsync(id, speaker);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the MyUniversalWindows10App.ISpeakers.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='speaker'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PatchAsync(this ISpeakers operations, int id, Speaker speaker, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PatchWithOperationResponseAsync(id, speaker, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the MyUniversalWindows10App.ISpeakers.
        /// </param>
        /// <param name='speaker'>
        /// Required.
        /// </param>
        public static object Post(this ISpeakers operations, Speaker speaker)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISpeakers)s).PostAsync(speaker);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the MyUniversalWindows10App.ISpeakers.
        /// </param>
        /// <param name='speaker'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PostAsync(this ISpeakers operations, Speaker speaker, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PostWithOperationResponseAsync(speaker, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the MyUniversalWindows10App.ISpeakers.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='speaker'>
        /// Required.
        /// </param>
        public static object Put(this ISpeakers operations, int id, Speaker speaker)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISpeakers)s).PutAsync(id, speaker);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the MyUniversalWindows10App.ISpeakers.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='speaker'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PutAsync(this ISpeakers operations, int id, Speaker speaker, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PutWithOperationResponseAsync(id, speaker, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
