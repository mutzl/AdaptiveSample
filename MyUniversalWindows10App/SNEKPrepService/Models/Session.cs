// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using MyUniversalWindows10App.Models;
using Newtonsoft.Json.Linq;

namespace MyUniversalWindows10App.Models
{
    public partial class Session
    {
        private string _abstractVariable;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string Abstract
        {
            get { return this._abstractVariable; }
            set { this._abstractVariable = value; }
        }
        
        private int? _id;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public int? Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private Speaker _speaker;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public Speaker Speaker
        {
            get { return this._speaker; }
            set { this._speaker = value; }
        }
        
        private string _title;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string Title
        {
            get { return this._title; }
            set { this._title = value; }
        }
        
        private int? _track;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public int? Track
        {
            get { return this._track; }
            set { this._track = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the Session class.
        /// </summary>
        public Session()
        {
        }
        
        /// <summary>
        /// Deserialize the object
        /// </summary>
        public virtual void DeserializeJson(JToken inputObject)
        {
            if (inputObject != null && inputObject.Type != JTokenType.Null)
            {
                JToken abstractValue = inputObject["Abstract"];
                if (abstractValue != null && abstractValue.Type != JTokenType.Null)
                {
                    this.Abstract = ((string)abstractValue);
                }
                JToken idValue = inputObject["Id"];
                if (idValue != null && idValue.Type != JTokenType.Null)
                {
                    this.Id = ((int)idValue);
                }
                JToken speakerValue = inputObject["Speaker"];
                if (speakerValue != null && speakerValue.Type != JTokenType.Null)
                {
                    Speaker speaker = new Speaker();
                    speaker.DeserializeJson(speakerValue);
                    this.Speaker = speaker;
                }
                JToken titleValue = inputObject["Title"];
                if (titleValue != null && titleValue.Type != JTokenType.Null)
                {
                    this.Title = ((string)titleValue);
                }
                JToken trackValue = inputObject["Track"];
                if (trackValue != null && trackValue.Type != JTokenType.Null)
                {
                    this.Track = ((int)trackValue);
                }
            }
        }
    }
}
